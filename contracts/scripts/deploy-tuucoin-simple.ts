import { createWalletClient, createPublicClient, http, formatEther } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import { config } from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

// ES module compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
config();

// KUB Testnet chain configuration
const kubTestnet = {
  id: 25925,
  name: 'KUB Testnet',
  nativeCurrency: { name: 'tKUB', symbol: 'tKUB', decimals: 18 },
  rpcUrls: {
    default: { http: ['https://rpc-testnet.bitkubchain.io'] },
  },
  blockExplorers: {
    default: { name: 'KubScan Testnet', url: 'https://testnet.kubscan.com' },
  },
};

async function main() {
  console.log('🔧 Deploy TuuCoin without ValidationLib');
  console.log('=====================================');

  // Setup clients
  const privateKey = process.env.KUB_TESTNET_PRIVATE_KEY;
  if (!privateKey) {
    throw new Error('KUB_TESTNET_PRIVATE_KEY not set');
  }

  const account = privateKeyToAccount(privateKey.startsWith('0x') ? privateKey as `0x${string}` : `0x${privateKey}` as `0x${string}`);

  const walletClient = createWalletClient({
    account,
    chain: kubTestnet,
    transport: http(),
  });

  const publicClient = createPublicClient({
    chain: kubTestnet,
    transport: http(),
  });

  console.log(`Deployer: ${account.address}`);
  console.log(`Balance: ${formatEther(await publicClient.getBalance({ address: account.address }))} KUB`);

  // Try to deploy using direct bytecode without constructor validation

  // First let's deploy just Randomness which has simpler constructor
  console.log(`\n📦 Testing Randomness deployment...`);

  const randomnessBytecode = `0x60803461006d57601f610bbb38819003918201601f19168301916001600160401b038311848410176100725780849260209460405283398101031261006d57516001600160a01b038116810361006d5761005890610088565b506000600155604051610a8490816101178239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381166000908152600080516020610b9b833981519152602052604090205460ff16610110576001600160a01b03166000818152600080516020610b9b83398151915260205260408120805460ff191660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b5060009056fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146104c8575080630e27e3df1461046d578063112940f9146103c5578063248a9ca3146103985780632f2ff15d1461035857806336568abe146103125780633a60c386146102f45780634303707e1461021b5780634bc02da6146101f2578063834ff739146101a25780638ad43c631461016e57806391d1485414610121578063a217fddf146101055763d547741f146100b957600080fd5b34610100576040366003190112610100576100fe6004356100d8610531565b906100f96100f482600052600060205260016040600020015490565b610792565b610869565b005b600080fd5b3461010057600036600319011261010057602060405160008152f35b346101005760403660031901126101005761013a610531565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461010057606036600319011261010057610187610744565b602061019a6044356024356004356105d7565b604051908152f35b34610100576020366003190112610100576101bb61051b565b6001600160a01b03166000908152600080516020610a2f833981519152602090815260409182902054915160ff9092161515825290f35b34610100576000366003190112610100576020604051600080516020610a0f8339815191528152f35b3461010057602036600319011261010057600435610237610744565b610242811515610547565b6001549060001982146102de5760016020920180600155604051838101914483524260408301524360608301523360601b608083015283609483015260b482015260b4815261029260d48261059f565b519020806102d857506001905b60405182815243848201527fc29c315b23ea508191d350a4ce53445ea8c03de1fd979d3d8b2a4dbd567ddf0a60403392a3604051908152f35b9061029f565b634e487b7160e01b600052601160045260246000fd5b34610100576000366003190112610100576020600154604051908152f35b346101005760403660031901126101005761032b610531565b336001600160a01b03821603610347576100fe90600435610869565b63334bd91960e11b60005260046000fd5b34610100576040366003190112610100576100fe600435610377610531565b906103936100f482600052600060205260016040600020015490565b61098a565b3461010057602036600319011261010057602061019a600435600052600060205260016040600020015490565b34610100576020366003190112610100576103de61051b565b6103e66106f1565b6001600160a01b03811690811561042857610400906108f2565b507f28b26e7a3d20aedbc5f8f2ebf7da671c0491723a2b78f47a097b0e46dee07142600080a2005b60405162461bcd60e51b815260206004820152601860248201527f496e76616c696420636f6e73756d6572206164647265737300000000000000006044820152606490fd5b346101005760203660031901126101005761048661051b565b61048e6106f1565b610497816107cd565b506001600160a01b03167fe3f5ed5f263f1f01764a96edfc7d025f511ec5f7d180e8816908b78bcf74f098600080a2005b34610100576020366003190112610100576004359063ffffffff60e01b821680920361010057602091637965db0b60e01b811490811561050a575b5015158152f35b6301ffc9a760e01b14905083610503565b600435906001600160a01b038216820361010057565b602435906001600160a01b038216820361010057565b1561054e57565b60405162461bcd60e51b8152602060048201526024808201527f52657175657374204944206d7573742062652067726561746572207468616e206044820152637a65726f60e01b6064820152608490fd5b90601f8019910116810190811067ffffffffffffffff8211176105c157604052565b634e487b7160e01b600052604160045260246000fd5b9190918183116106a2576105ec811515610547565b81831461069d5760405190632181b83f60e11b825260048201526020816024816000305af19081156106915760009161065f575b508282039182116102de57600182018092116102de578115610649570681018091116102de5790565b634e487b7160e01b600052601260045260246000fd5b90506020813d602011610689575b8161067a6020938361059f565b81010312610100575138610620565b3d915061066d565b6040513d6000823e3d90fd5b505090565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c69642072616e67653a206d696e206d757374206265203c3d206d616044820152600f60fb1b6064820152608490fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff161561072a57565b63e2517d3f60e01b60005233600452600060245260446000fd5b336000908152600080516020610a2f833981519152602052604090205460ff161561076b57565b63e2517d3f60e01b60005233600452600080516020610a0f83398151915260245260446000fd5b60008181526020818152604080832033845290915290205460ff16156107b55750565b63e2517d3f60e01b6000523360045260245260446000fd5b6001600160a01b0381166000908152600080516020610a2f833981519152602052604090205460ff1615610863576001600160a01b03166000818152600080516020610a2f83398151915260205260408120805060ff19169055339190600080516020610a0f833981519152907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b50600090565b6000818152602081815260408083206001600160a01b038616845290915290205460ff16156108eb576000818152602081815260408083206001600160a01b0395909516808452949091528120805460ff19169055339291907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9080a4600190565b5050600090565b6001600160a01b0381166000908152600080516020610a2f833981519152602052604090205460ff16610863576001600160a01b03166000818152600080516020610a2f83398151915260205260408120805460ff19166001179055339190600080516020610a0f833981519152907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9080a4600190565b6000818152602081815260408083206001600160a01b038616845290915290205460ff166108eb576000818152602081815260408083206001600160a01b0395909516808452949091528120805460ff19166001179055339291907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9080a460019056fe9d56108290ea0bc9c5c59c3ad357dca9d1b29ed7f3ae1443bef2fa2159bdf5e860d27a4458aab6b352847091b9bd047730a6f421d79d3e60b87caf78a23077bea26469706673582212208c5e7f3cd60abb1c9dc04165f12765692cba00badde91476e0bab12b6c1b842d64736f6c634300081c0033ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5`;

  try {
    // First, let's use raw transaction with constructor parameter
    const constructorParams = account.address.slice(2).padStart(64, '0'); // Remove 0x and pad
    const deployBytecode = randomnessBytecode + constructorParams;

    const hash = await walletClient.sendTransaction({
      to: null,
      data: deployBytecode as `0x${string}`,
      gas: BigInt(2000000),
    });

    console.log(`⏳ Transaction hash: ${hash}`);

    const receipt = await publicClient.waitForTransactionReceipt({ hash });

    console.log(`Status: ${receipt.status === 'success' ? 'SUCCESS' : 'FAILED'}`);
    console.log(`Gas Used: ${receipt.gasUsed.toString()}`);
    console.log(`Contract Address: ${receipt.contractAddress}`);

    if (receipt.contractAddress) {
      const code = await publicClient.getCode({ address: receipt.contractAddress });
      console.log(`Contract Code: ${code && code !== '0x' ? 'EXISTS' : 'MISSING'}`);

      if (code && code !== '0x') {
        console.log('✅ Randomness deployed successfully!');
      }
    }

  } catch (error) {
    console.log(`❌ Randomness deployment failed: ${error}`);
  }
}

main()
  .then(() => {
    console.log('\n🔧 Simple deployment test complete');
  })
  .catch((error) => {
    console.error('Error:', error);
  });